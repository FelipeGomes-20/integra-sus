version: '3.9'

services:

  postgres:
    image: postgres:15
    container_name: hospitalar-postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: integrador
      POSTGRES_PASSWORD: integrador123
      POSTGRES_DB: hospitaldb
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - hospitalar-net

  mongodb:
    image: mongo:5.0
    container_name: hospitalar-mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: integrador
      MONGO_INITDB_ROOT_PASSWORD: integrador123
    volumes:
      - ./data/mongodb:/data/db
    networks:
      - hospitalar-net

  redis:
    image: redis:6.2
    container_name: hospitalar-redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - hospitalar-net

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: hospitalar-zookeeper
    ports:
      - "2181:2181"
    networks:
      - hospitalar-net

  kafka:
    image: wurstmeister/kafka:2.12-2.4.1
    container_name: hospitalar-kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - hospitalar-net

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: hospitalar-kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      - kafka
    networks:
      - hospitalar-net

networks:
  hospitalar-net:
    driver: bridge
